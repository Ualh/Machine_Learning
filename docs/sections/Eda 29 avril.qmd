---
title: "EDA properties"
author: "Hugo Troendle, Urs Huerni, Léo Wenger"
format: html
editor: visual
---

## Change the path below

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
# Load required libraries
library(ggplot2)
library(plotly)
library(here)
library(readxl)


# Set the working directory to the data folder
here::set_here()

```

## Loading and small cleaning (not complete for now)

properties cleaning

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Load the CSV file into a data frame
properties <- read.csv("../../data/properties.csv")

# Identify values causing the issue
problematic_values <- properties$number_of_rooms[is.na(as.numeric(properties$number_of_rooms))]

# Replace non-numeric values with NA
properties$number_of_rooms <- as.numeric(gsub("[^0-9.]", "", properties$number_of_rooms))

# Remove non-numeric characters and convert to numeric
properties$price <- as.numeric(gsub("[^0-9]", "", properties$price))

# Subset the dataset to exclude rows with price < 20000
properties <- properties[properties$price >= 20000, ]

# Subset the dataset to exclude rows with numbers of rooms < 25
properties <- properties[properties$number_of_rooms <25, ]

# Replace incomplete addresses
properties$address <- gsub("^\\W*[.,0-]\\W*", "", properties$address)

properties_filtered <- na.omit(properties)

properties_filtered$year_category <- substr(properties_filtered$year_category, 1, 9)
# Assuming 'year_category' is a column in the 'properties' dataset
properties_filtered$year_category <- as.factor(properties_filtered$year_category)

# Preprocess the number_of_rooms column
properties_filtered$number_of_rooms <- as.character(properties_filtered$number_of_rooms)
properties_filtered$number_of_rooms <- gsub("\\D", "", properties_filtered$number_of_rooms)  # Remove non-numeric characters
properties_filtered$number_of_rooms <- as.numeric(properties_filtered$number_of_rooms)       # Convert to numeric
properties_filtered$number_of_rooms <- trunc(properties_filtered$number_of_rooms)             # Truncate non-integer values


# Assuming properties_filtered is your dataframe
properties_filtered$canton <- tools::toTitleCase(properties_filtered$canton)

```

impots cleaning

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

#excel file modified for fribourg and liestal 
impots <- read_excel("../../data/statistik-steuerfuesse-np-1995-2023-fr.xlsx", skip = 14)
# Remove last 13 rows
impots <- head(impots, -14)
# Rename columns
colnames(impots) <- c("Chefs-lieux cantonaux", "Impôt cantonal", "Impôt communal", "Impôt paroissial Evang. / réform", "Impôt paroissial Kath. / cath.rom")

# Set row names to the content of the first column
rownames(impots) <- impots$`Chefs-lieux cantonaux`

# Remove the first column (which is now row names)
impots1 <- impots[, -1, drop = FALSE]

# Set the row names for impots1 the same as impots
rownames(impots1) <- rownames(impots)
impots <- impots1
rm(impots1)

# Write data to CSV
write.csv(impots, "statistik-steuerfuesse-np-1995-2023-fr.csv", row.names = TRUE)

```

```{r}
#| code-fold: true
#| code-summary: "Click to show code"
# Create a copy of properties_filtered
properties_merged <- properties_filtered

# Loop through unique canton names in properties_filtered
for (canton_name in unique(properties_filtered$canton)) {
  # Check if canton_name exists as a row name in impots
  if (canton_name %in% rownames(impots)) {
    # Get the corresponding row from impots
    impots_row <- impots[canton_name, ]
    
    # Add columns to properties_merged with impots content
    for (col_name in names(impots)) {
      properties_merged[properties_merged$canton == canton_name, paste0(col_name, "_impots")] <- impots_row[[col_name]]
    }
    
    # Remove impots_row from memory
    rm(impots_row)
  }
}

# Write data to CSV
write.csv(properties_merged, "properties_with_impots.csv", row.names = FALSE)

```

dataset use for the rest of the analysis

```{r}
properties_filtered <- properties_merged
```

## Histogram of prices

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

histogram_price <- ggplot(properties_filtered, aes(x = price)) +
  geom_histogram(binwidth = 100000, fill = "skyblue", color = "red") +
  labs(title = "Distribution of Prices",
       x = "Price",
       y = "Frequency") +
  theme_minimal()
# Convert ggplot object to plotly object
interactive_histogram_price <- ggplotly(histogram_price)
# Display the interactive histogram
interactive_histogram_price

```

## Histogram of prices for each property type

note : only price between 0 and 500000 so some outliers aren't here

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Create the ggplot object
histogram <- ggplot(properties_filtered, aes(x = price)) +
  geom_histogram(binwidth = 100000, fill = "skyblue", color = "black") +
  facet_wrap(~ property_type, scales = "free", ncol = 2) +
  labs(title = "Distribution of Prices by Property Type",
       x = "Price",
       y = "Frequency") +
  theme_minimal() +
  xlim(0, 5000000)

# Convert ggplot object to plotly object
interactive_histogram <- ggplotly(histogram)

# Display the interactive plot
interactive_histogram

```

## Histogram of prices for each year category

note : only price between 0 and 500000 so some outliers aren't here

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

# Create a histogram of prices for each year category
histogram <- ggplot(properties_filtered, aes(x = price)) +
  geom_histogram(binwidth = 100000, fill = "skyblue", color = "black") +
  facet_wrap(~ year_category, scales = "free", ncol = 2) +
  labs(title = "Distribution of Prices by Year Category",
       x = "Price",
       y = "Frequency") +
  theme_minimal() +
  xlim(0, 5000000)
# Convert ggplot object to plotly object
interactive_histogram_year <- ggplotly(histogram)
# Display the interactive plot
interactive_histogram_year

```

## Histogram of prices for each canton

note : only price between 0 and 500000 so some outliers aren't here

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

histogram <- ggplot(properties_filtered, aes(x = price)) +
  geom_histogram(binwidth = 100000, fill = "skyblue", color = "black") +
  facet_wrap(~ canton, scales = "free", ncol = 2) +
  labs(title = "Distribution of Prices by Canton",
       x = "Price",
       y = "Frequency") +
  theme_minimal() +
  xlim(0, 5000000)

# Convert ggplot object to plotly object with adjusted height
interactive_histogram <- ggplotly(histogram) %>%
  layout(height = 1000)  # Adjust the height as needed

# Display the interactive plot
interactive_histogram

```

## Histogram of prices for each number of rooms

note : only price between 0 and 500000 so some outliers aren't here

and the graph below only show apartments with less than 10 rooms (but you can change the code if needed

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Click to show code"

properties_room <- properties_filtered[properties_filtered$number_of_rooms < 20, ]                  # Filter only number_of_rooms less than 20

# Create a histogram of prices for each number of rooms
histogram <- ggplot(properties_room, aes(x = price)) +
  geom_histogram(binwidth = 100000, fill = "skyblue", color = "black") +
  facet_wrap(~ number_of_rooms, scales = "free", ncol = 2) +
  labs(title = "Distribution of Prices by Number of Rooms",
       x = "Price",
       y = "Frequency") +
  theme_minimal() +
  xlim(0, 5000000)

# Convert ggplot object to plotly object with adjusted height
interactive_histogram <- ggplotly(histogram) %>%
  layout(height = 1000)  # Adjust the height as needed

# Display the interactive plot
interactive_histogram

```

## Histogram of prices with impot

```{r, warning=FALSE}
#| code-fold: true
#| code-summary: "Click to show code"
colnames(properties_filtered)[(ncol(properties_filtered) - 3):ncol(properties_filtered)] <- gsub("\\s+", "_", colnames(properties_filtered)[(ncol(properties_filtered) - 3):ncol(properties_filtered)])


# # Create a histogram of prices for each Impôt cantonal
# histogram <- ggplot(properties_filtered, aes(x = price, fill = Impôt_cantonal_impots)) +
#   geom_histogram(binwidth = 100000, color = "black") +
#   labs(title = "Distribution of Prices by Impôt cantonal",
#        x = "Price",
#        y = "Frequency",
#        fill = "Impôt cantonal") +
#   theme_minimal()
# 
# # Convert ggplot object to plotly object
# interactive_histogram <- ggplotly(histogram)
# 
# # Display the interactive plot
# interactive_histogram
```

## Test Regression

```{r}
#| code-fold: true
#| code-summary: "Click to show code"

# Perform multiple linear regression
model <- lm(price ~ number_of_rooms + canton + property_type + year_category, data = properties)

# Summarize the regression model
summary(model)
```
