# EDA

## Map representation of distribution of properties

Here we decided to represent the distribution of properties in Switzerland using a map. The map is interactive and allows users to hover over the markers to see the price. The markers are color-coded in orange and have a semi-transparent fill to reduce visual noise. The size of the markers is smaller to optimize the visual representation of the data.

This visualization helps in understanding the geographical spread and density of properties in the dataset.

```{r}
# Create a leaflet map with optimized markers and default view set to Switzerland
map <- leaflet(properties_filtered) %>%
  addTiles() %>%  # Add default OpenStreetMap tiles
  addProviderTiles(providers$Esri.NatGeoWorldMap) %>%  # Add topographic maps for context
  setView(lng = 8.2, lat = 46.1, zoom = 7.49) %>%  # Set the default view to Switzerland
  addCircleMarkers(
    ~lon, ~lat,
    radius = 1.5,  # Smaller radius for the circle markers
    color = "#F97300",  # Specifying a color for the markers
    fillOpacity = 0.2,  # Semi-transparent fill
    stroke = FALSE,  # No border to the circle markers to reduce visual noise
    popup = ~paste("Price: ", price, "<br>",
                   "Rooms: ", number_of_rooms, "<br>",
                   "Type: ", property_type, "<br>",
                   "Year: ", year_category),
    label = ~paste("Price: ", price)  # Tooltip on hover
  ) %>% 
  addLegend(
    position = "bottomright",  # Position the legend at the bottom right
    colors = "#F97300",  # Use the same color as the markers
    labels = "Properties"  # Label for the legend
  )

map$width <- "100%"  # Set the width of the map to 100%
map$height <- 600  # Set the height of the map to 600 pixels

map

```

The map highlights that properties are well-distributed throughout the region, with fewer properties in the Alpine region, which is expected due to its mountainous terrain. We thus have a good representation of the data across different cantons and locations and we can use it for further analysis.

## Histogram of prices

```{r, warning=FALSE}
# Define breaks for x-axis in millions
breaks <- seq(0, 25000000, by = 5000000)
labels <- paste0(breaks/1000000, "Mio")

# Calculate percentile
percentile_95 <- quantile(properties_filtered$price, 0.95)
percentile_05 <- quantile(properties_filtered$price, 0.05)
percentile_99 <- quantile(properties_filtered$price, 0.99)
# Create the histogram
histogram_price <- ggplot(properties_filtered, aes(x = price)) +
  geom_histogram(binwidth = 100000, fill = "skyblue", color = "red") +
  geom_vline(xintercept = percentile_05, linetype = "dashed", color = "blue")+
  geom_text(aes(x = percentile_05, y = 1700, label = "5th percentile"), vjust = -1, color = "blue", size = 2) +
  geom_vline(xintercept = percentile_95, linetype = "dashed", color = "blue") +
  geom_text(aes(x = percentile_95, y = 1750, label = "95th percentile"), vjust = -1, color = "blue", size = 2) +
  geom_vline(xintercept = percentile_99, linetype = "dashed", color = "blue") +
  geom_text(aes(x = percentile_99, y = 1800, label = "99th percentile"), vjust = -1, color = "blue", size = 2) +
  labs(title = "Distribution of Prices",
       x = "Price in Chf",
       y = "Frequency") +
  theme_minimal() +
  scale_x_continuous(breaks = breaks, labels = labels)

# Convert ggplot object to plotly object
interactive_histogram_price <- ggplotly(histogram_price, width = 750, height = 400)

# Display the interactive histogram
interactive_histogram_price
```
As we can see, 90% of the properties are concentrated between CHF 395590 and CHF 3,3 million. Feel free zoom on this part of the graph to see the majority of the properties. Only 5% of the data is worth more than CHF 3,3 million and only 1% of the properties are worth more than CHF 6,6 million.

## Price between 0 and 3,5 millions
To enhance data visibility, we will focus on the majority of the data between 0 and 3,5 million, to filter out outliers.

### Histogram of prices for each property type

```{r, warning=FALSE}

# Count the number of observations for each property_type
property_type_counts <- properties_filtered %>%
  group_by(property_type) %>%
  summarise(count = n())

# Filter property types with more than 300 observations
filtered_property_types <- property_type_counts %>%
  filter(count > 300) %>%
  pull(property_type)

# Filter the properties_filtered dataset
filtered_properties <- properties_filtered %>%
  filter(property_type %in% filtered_property_types)

# Define breaks for x-axis in millions
breaks <- seq(0, 3500000, by = 1000000)
labels <- paste0(breaks / 1000000, "Mio")

# Create the ggplot object
histogram <- ggplot(filtered_properties, aes(x = price)) +
  geom_histogram(binwidth = 100000, fill = "skyblue", color = "black") +
  facet_wrap(~ property_type, scales = "free", ncol = 2) +
  labs(title = "Distribution of Prices by Property Type",
       x = "Price in Chf",
       y = "Frequency") +
  theme_minimal() +
  scale_x_continuous(breaks = breaks, labels = labels, limits = c(0, 3500000))

# Convert ggplot object to plotly object
interactive_histogram <- ggplotly(histogram, width = 750, height = 600)
# Adjust margins to prevent x-axis label from being cut off
interactive_histogram <- layout(interactive_histogram, margin = list(l = 50, r = 50, b = 50, t = 50), autosize = TRUE)

# Display the interactive plot
interactive_histogram


```

We choose to only display the properties type with more than 300 observations. However, please not that our data set contains other types, such as rustic house, terrace flat, loft or farm house.
The majority of property types seem to be valued at less than CHF 3 million, with apartments and single houses being the most frequent.

### Histogram of prices for each year category

```{r, warning=FALSE}
# Filter data for the year category 2016-2024
properties_filtered_2016_2024 <- properties_filtered %>% 
  filter(year_category =="2016-2024")

# Define breaks for x-axis in millions
breaks <- seq(0, 3500000, by = 1000000)
labels <- paste0(breaks/1000000, "Mio")

# Create a histogram of prices for each year category
histogram <- ggplot(properties_filtered_2016_2024, aes(x = price)) +
  geom_histogram(binwidth = 100000, fill = "skyblue", color = "black") +
  facet_wrap(~ year_category, scales = "free", ncol = 2) +
  labs(title = "Distribution of Prices by Year Category (2016-2024)",
       x = "Price in CHF",
       y = "Frequency") +
  theme_minimal() +
  scale_x_continuous(breaks = breaks, labels = labels, limits = c(0, 3500000))

# Convert ggplot object to plotly object
interactive_histogram_year <- ggplotly(histogram, width = 750, height = 300)
# Adjust margins to prevent x-axis label from being cut off
interactive_histogram_year <- layout(interactive_histogram_year, margin = list(l = 50, r = 50, b = 50, t = 50), autosize = TRUE)
# Display the interactive plot
interactive_histogram_year


```
We chose to only show the year 2016-2024 category, as the majority of properties in our data set were built in this period and the distribution across other categories remain consistent.


### Histogram of prices for each canton

Here we plot the distribution of prices in each Canton, to better visualize the differences between them.

```{r, warning=FALSE}
# Define breaks for x-axis in millions
breaks <- seq(0, 5200000, by = 1000000)
labels <- paste0(breaks/1000000, "Mio")

# Create the histogram
histogram <- ggplot(properties_filtered, aes(x = price)) +
  geom_histogram(binwidth = 100000, fill = "skyblue", color = "black") +
  facet_wrap(~ canton, scales = "free", ncol = 2) +
  labs(title = "Distribution by Canton for properties between 0 and 5 million",
       x = "Price in Chf",
       y = "Frequency") +
  theme(axis.text.y = element_text(size = 2)) +
  theme_minimal() +
  scale_x_continuous(breaks = breaks, labels = labels, limits = c(0, 5200000))

# Convert ggplot object to plotly object with adjusted height
interactive_histogram <- ggplotly(histogram, width = 750, height = 1100)
# Adjust margins to prevent x-axis label from being cut off
interactive_histogram <- layout(interactive_histogram, margin = list(l = 50, r = 50, b = 50, t = 50), autosize = TRUE)
# Display the interactive plot
interactive_histogram


```
Compared to other cantons, Geneva has a distinct distribution with many properties worth more than CHF 2 million.
The canton of Vaud, Valais, Tessin, Bern, and Fribourg are where the majority of the listed properties are concentrated in our data set.Their distribution show that the majority of properties are worth between 0,4 million and 2 million chf.

We can note that our model may be biased towards Cantons with more extensive data availability.

### Histogram of prices for each number of rooms

```{r, warning=FALSE}
# Define breaks for x-axis in millions
breaks <- seq(0, 3500000, by = 1000000)
labels <- paste0(breaks/1000000, "Mio")
subset_properties <- properties_filtered %>% filter(number_of_rooms <= 12)
# Create the histogram
histogram <- ggplot(subset_properties, aes(x = price)) +
  geom_histogram(binwidth = 100000, fill = "skyblue", color = "black") +
  facet_wrap(~ number_of_rooms, scales = "free", ncol = 2) +
  labs(title = "Distribution of Prices by Number of Rooms",
       x = "Price in Chf",
       y = "Frequency") +
  theme_minimal() +
  scale_x_continuous(breaks = breaks, labels = labels, limits = c(0, 3500000))

# Convert ggplot object to plotly object with adjusted height
interactive_histogram <- ggplotly(histogram, width = 750, height = 1000) 
# Adjust margins to prevent x-axis label from being cut off
interactive_histogram <- layout(interactive_histogram, margin = list(l = 50, r = 50, b = 50, t = 50), autosize = TRUE)
# Display the interactive plot
interactive_histogram


```

Here is the distribution of prices per number of rooms. Please note that we didn't display the properties with more than 12 rooms as the number of observations for these are very scattered.

The majority of properties have between 2,5 and 6,5 rooms, and the distribution tends to shift towards higher prices as the number of rooms increases.

## Histogram of properties by square meters

For better visualization purposes, we only show the properties with less than 1000 square meters

```{r, warning=FALSE}
# Calculate percentile
percentile_95 <- quantile(properties_filtered$square_meters, 0.95)
percentile_05 <- quantile(properties_filtered$square_meters, 0.05)

histogram <- ggplot(properties_filtered, aes(x = square_meters)) +
  geom_histogram(binwidth = 15, fill = "skyblue", color = "black") +
  geom_vline(xintercept = percentile_05, linetype = "dashed", color = "blue")+
  geom_text(aes(x = percentile_05, y = 1750, label = "5th percentile"), vjust = -1, color = "blue", size = 2) +
  geom_vline(xintercept = percentile_95, linetype = "dashed", color = "blue") +
  geom_text(aes(x = percentile_95, y = 1750, label = "95th percentile"), vjust = -1, color = "blue", size = 2) +
  labs(title = "Distribution of Properties by Square Meters",
       x = "Square Meters",
       y = "Frequency") +
  theme_minimal() +
  xlim(0,1000)

# Convert ggplot object to plotly object with adjusted height
interactive_histogram <- ggplotly(histogram, width = 750, height = 300 )  # Adjust width and height as needed
# Adjust margins to prevent x-axis label from being cut off
interactive_histogram <- layout(interactive_histogram, margin = list(l = 50, r = 50, b = 50, t = 50), autosize = TRUE)
# Display the interactive plot
interactive_histogram

```

Unsurprisingly, the distribution shows that we have more smaller properties than large ones.
90% of the data is between 62 and 330 square meters.

## Histogram of prices by Tax Cluster

```{r, warning=FALSE}


# Calculate summary statistics for price by Tax Cluster
summary_stats <- properties_filtered %>%
  group_by(Tax_cluster) %>%
  summarise(avg_price = mean(price),
            Q10 = quantile(price, 0.10),
            Q90 = quantile(price, 0.90))

# Define breaks for y-axis in millions
breaks <- seq(0, 3500000, by = 1000000)
labels <- paste0(breaks / 1000000, "Mio")

# Plot line plot
line_plot <- ggplot(summary_stats, aes(x = Tax_cluster)) +
  geom_line(aes(y = avg_price, color = "Mean Price")) +
  geom_line(aes(y = Q10, color = "10th Quartile")) +
  geom_line(aes(y = Q90, color = "90th Quartile")) +
  labs(title = "Average Property Prices by Tax Cluster",
       x = "Tax Cluster",
       y = "Price in CHF") +
  scale_color_manual(values = c("Mean Price" = "blue", "10th Quartile" = "green", "90th Quartile" = "red")) +
  theme_minimal() +
  scale_y_continuous(breaks = breaks, labels = labels, limits = c(0, 3500000))

# Display the line plot
line_plot
```
Based on the results, the clusters 1 and 5 are similar with the mean around CHF 1 million. Clusters 3 and 4 have a mean around CHF 1,25 million. Cluster 2 seems to be slightly different from the others with a mean around CHF 1,5 million. 80% of the properties are between CHF 0,5 and CHF 2,7 million.

## Histogram of prices by Political cluster

```{r, warning=FALSE}

library(ggplot2)
library(dplyr)

# Calculate summary statistics for price by Political Cluster
summary_stats <- properties_filtered %>%
  group_by(Political_cluster) %>%
  summarise(avg_price = mean(price),
            Q10 = quantile(price, 0.10),
            Q90 = quantile(price, 0.90))

# Define breaks for y-axis in millions
breaks <- seq(0, 3500000, by = 1000000)
labels <- paste0(breaks / 1000000, "Mio")

# Plot line plot
line_plot <- ggplot(summary_stats, aes(x = Political_cluster)) +
  geom_line(aes(y = avg_price, color = "Mean Price")) +
  geom_line(aes(y = Q10, color = "10th Quartile")) +
  geom_line(aes(y = Q90, color = "90th Quartile")) +
  labs(title = "Average Property Prices by Political Cluster",
       x = "Political Cluster",
       y = "Price in CHF") +
  scale_color_manual(values = c("Mean Price" = "blue", "10th Quartile" = "green", "90th Quartile" = "red")) +
  theme_minimal() +
  scale_y_continuous(breaks = breaks, labels = labels, limits = c(0, 3500000))

# Display the line plot
line_plot



```
The political clusters 1, 2 and 4 are similar with a mean price of properties around CHF 1,1 million. The political cluster 3 has the higher mean price with CHF 1,75 million. And the 5th one has a mean around CHF 1,3 million.

## Histogram of prices by demographic cluster

```{r, warning=FALSE}

# Calculate summary statistics for price by Demographic Cluster
summary_stats <- properties_filtered %>%
  group_by(Demographic_cluster) %>%
  summarise(avg_price = mean(price),
            Q10 = quantile(price, 0.10),
            Q90 = quantile(price, 0.90))

# Define breaks for y-axis in millions
breaks <- seq(0, 4000000, by = 1000000)
labels <- paste0(breaks / 1000000, "Mio")

# Plot line plot
line_plot <- ggplot(summary_stats, aes(x = Demographic_cluster)) +
  geom_line(aes(y = avg_price, color = "Mean Price")) +
  geom_line(aes(y = Q10, color = "10th Quartile")) +
  geom_line(aes(y = Q90, color = "90th Quartile")) +
  labs(title = "Average Property Prices by Demographic Cluster",
       x = "Demographic Cluster",
       y = "Price in CHF") +
  scale_color_manual(values = c("Mean Price" = "blue", "10th Quartile" = "green", "90th Quartile" = "red")) +
  theme_minimal() +
  scale_y_continuous(breaks = breaks, labels = labels, limits = c(0, 4000000))

# Display the line plot
line_plot
all_objects <- ls()

# Remove all objects except 'properties_filtered'
rm(list = setdiff(all_objects, "properties_filtered"))

```

This graph aligns with our interpretation of the clusters in section 3. Indeed, cluster 4, which we defined to be municipalities in large cities, unsurprisingly shows the highest mean price.